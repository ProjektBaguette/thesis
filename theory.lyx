#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrbook
\begin_preamble
% increases link area for cross-references and autoname them
\AtBeginDocument{\renewcommand{\ref}[1]{\mbox{\autoref{#1}}}}
\addto\extrasenglish{%
 \renewcommand*{\equationautorefname}[1]{}
 \renewcommand{\sectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
 \renewcommand{\figureautorefname}{Fig.\negthinspace}
 \renewcommand{\tableautorefname}{Tab.\negthinspace}
}

% in case somebody want to have the label "Equation"
%\renewcommand{\eqref}[1]{Equation~(\negthinspace\autoref{#1})}

% that links to image floats jumps to the beginning
% of the float and not to its caption
\usepackage[figure]{hypcap}

% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% makes caption labels bold
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enables calculations
\usepackage{calc}

% fancy page header/footer settings
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increases the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoids that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage,fleqn
\use_default_options true
\master thesis.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\branch NoChildDocument
\selected 0
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Left Header
Giuliano Grassi
\end_layout

\begin_layout Right Header
SQA Process-Tailoring 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
linebreak[1]
\end_layout

\end_inset

for Small-Scaled Software Engineering Enterprises
\end_layout

\begin_layout Center Footer

\end_layout

\begin_layout Right Footer
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
 
\end_layout

\end_inset

of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pageref{LastPage}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Theory
\end_layout

\begin_layout Standard
The next chapter introduces the motivation for writing this paper and determines
 what kind of companies will be addressed by the research.
 As a first step, I am going to define acceptance criteria for the SQA models
 in small-scaled software engineering companies.
 In the following step, im going to summarize research literature which
 fits to the topic of this paper.
\end_layout

\begin_layout Standard
My motivation to write this paper originated through own experiences working
 in small companies, without operating a dedicated Quality Assurance Strategy
 within the software or product development process.
 The origins of the problems can be summarized into two categories.
 On the one hand, lack of experience in the field and on the other hand
 pressure to deliver on time for the market.
 
\end_layout

\begin_layout Standard
The first problem addresses the roles and the structure of small companies
 in general.
 The usual staff selection strategy of a small company is to employ generalists.
 Ideally there should be an optimal mixture throughout specialists and generalis
ts.
 In addition, it depends on each company differently, but from startups
 to mid-stage sized companies, the generalists have commonly the superiority
\begin_inset CommandInset citation
LatexCommand cite
key "RaismanAliDouglasGabbyWieberJordynRoss"

\end_inset

.
\end_layout

\begin_layout Standard
The second problem faces the tactical advantages of small and therefore
 flexible and straightforward mentality of the companies.
 Due to the lack of processes and existing obstacles in project management,
 the implementation process itself is the single measurable process.
 To achieve the cost leader advantage in the market, it requires to deliver
 a product rapidly and achieve simultaneously the required business goals.
 This short-term view on solving the problem will lead to abandoned hazardous
 sites generally speaking, in terms of software engineering.
 The next team wont reuse the previous work for a similar upcoming project
 and restart with the vision of solving the problem, this time, adequate.
 
\end_layout

\begin_layout Standard
On the base of the two problems, I selected four requirements for the SQA
 process for startups until mid-staged companies.
 1) Whenever a highly specialized field needs to be treated through the
 Software Quality Assurance process, buy the appropriate software solution,
 which helps you safe time and effort.
 2) The the staff will not have a specialized education on the new SQA processes.
 The method should require to be manageable for regular engineers 3) The
 optimal solution will focus on the ease and understandability of that SQA
 processes for all participants.
 However, the process should not depend or influence on the habitual development
 process.
 4) The resulted savings in time and money need to be evident and easily
 comprehensible.
\end_layout

\begin_layout Standard
On exploring the different researches about best practices in SQA I came
 across several authors, which mostly have worked in different areas.
 In the following part I am going to present the most suitable papers found
 about state of the art SQA approaches.
\end_layout

\begin_layout Standard
The first research has been developed by Ferrat and Mai (2010) and concentrates
 on the ideas behind tailoring software development.
 The tailoring of SQA methods is split into three phases which has several
 aspect to solve as there are 1) Product Design > Process Selection 2) Project
 Design > Process Modification 3) Feedback Design > Process Monitoring.
 The goal of the study was to show the coherence and dependencies between
 the involved counterparts as the system provider, the system user and the
 development team in a product development process.
 The main prospect was to be aware of, that the degree of product customization,
 standardization and further alignments all have a big impact on the overall
 investments in quality.
 The degree of high or low standardization of the quality assurance process
 depends on mainly four criteria which will be determined through the specificat
ions in the product design phase.
 All involved counterparts prioritize the main Work Product Description
 (WPD) and build upon these targets the structure for the project.
 Once the overall structure is composed, the combination of team experience,
 project scope, risks or the culture will influence the variance of the
 process modification in comparison to the standard process.
 The continuous improvement with adoptions of the selected processes during
 the project life-cycle is an overall found prerequisite for a successful
 project.
 The presented model is very theoretically but shows a dependency overview
 and tries to break down the complexity of correlations in a project into
 understandable pieces
\begin_inset CommandInset citation
LatexCommand cite
key "Ferratt:2010:TSD:1796900.1796963"

\end_inset

.
\end_layout

\begin_layout Standard
The second research written by Tomar and Thakare (2013) focuses on the different
iation between process and product oriented Quality Assurance Models.
 The product oriented aspect relies on reusing proven and already tested
 components by capturing re-usability metrics.
 The process oriented aspect takes different phases of the product development
 cycle into consideration.
 The proposed model creates in total 9 different Quality Assurance Stations
 which will be traversed sequentially as they are 1) Estimation & Forecasting
 Division 2) Planing & Reuse Center Standard Enforcing Division 3) Manufacturing
 Division 4) Monitoring the Manufacturing Division 5) Reusable Code Repository
 6) Evaluation and Improvement 7) User Satisfaction 8) Reusable Service
 Repository.
 The model emphasis on generating and maintaining repositories of reusable
 components to reduce costs by improving the speed of development.
 The model takes into account the companies own policies and guarantees
 the quality by integrating evaluation, improvement and monitoring of reusable
 assets which are used in Components based Engineering
\begin_inset CommandInset citation
LatexCommand cite
key "tomar2013customized"

\end_inset

.
\end_layout

\begin_layout Standard
The third paper researched by Hongying and Cheng (2011) introduces A Customizabl
e Agile Software Quality Assurance Model (AQAM).
 The model provides detailed guidelines and templates for real world implementat
ions and customizations focusing on small and medium sized agile software
 development teams to analyze and improve their Quality Assurance capabilities.
 The model describes 20 different Key Process Areas (KPA).
 Each KPA is described by 1) Guidelines 2) Benefits 3) Process 4) Best Practice
 5) Templates 6) Customization and 7) Maturity Level.
 The first step is to define the actual maturity level of an analyzed KPA
 Process.
 The project manager and the development team can propose an appropriate
 action plan.
 By cherry picking the right combination of recommended actions, processes
 and artifacts from the AQAM for a single KPA.
 The authors paper illustrates the work-flow of AQAM by selecting and customizin
g the KPA Peer Review.
 The KPA consisted of seven guidelines to different review types, seven
 best practices for scaffolding the requirements for the review, three templates
 for documentation purposes, four maturity levels with advised steps to
 achieve and the customization section which is separated in a required
 and a recommended content declaration
\begin_inset CommandInset citation
LatexCommand cite
key "6093459"

\end_inset

.
\end_layout

\begin_layout Standard
The fourth paper created by Shihab (2011) illuminates the pragmatic prioritizati
on of software quality assurance efforts.

\emph on
 
\emph default
The paper shows that more than 90% of the software development cost is spent
 on maintenance and evolution activities.
 Therefore, practitioners are in dire need of pragmatic approaches to effectivel
y prioritize the SQA efforts.
 The work is split into efforts for code level quality, which assures the
 quality of already implemented code.
 On the other hand change level quality, which focuses on a high level of
 quality for new code changes or new features.
 Both parts follow the specific guidelines, which are defined as 1) Focused
 Granularity, unit of prioritization must be small enough 2) Timely Feedback,
 act on feedback/results as quick as possible 3) Estimate Efforts, be aware
 of the amount of work 4) Evaluate Generality, evaluation of approach in
 different domains
\begin_inset CommandInset citation
LatexCommand cite
key "Shihab:2011:PPS:1985793.1986007"

\end_inset

.
\end_layout

\begin_layout Standard
The approach at the code level helps to prioritize Unit Test creation.
 The main idea is to connect all actions tracked in the Concurrent Versions
 System (CVS) repositories to the issue tracking tools.
 By creating a coherent mapped environment between code changes and issue
 types like bug, change request, feature, improvement and so on, its possible
 to analyze the historical data and calculate just in time heuristics for
 forecasting purposes in a report form.
 The most useful heuristics are Largest Fixed, Largest Modified, Most Frequent
 Fixed, Most Recently Modified and show the highest risk of having a bug
 in the future.
 The approach at the change level focuses on catching bugs before they are
 injected into the code base by identifying the risky changes and rigorously
 reviewing them.
 The data needed to calculate the heuristics compose in the same manner
 as described above.
 To calculate the risk, the writers propose to take into account 1) Amount
 of churn in each function 2)The spread of the change based op.36n affected
 Files 3) Total of previously Changes for bug-fixings in this function 4)
 Amount of different developers that changed this function.
\begin_inset CommandInset citation
LatexCommand cite
key "Shihab:2011:PPS:1985793.1986007"

\end_inset

.
\end_layout

\begin_layout Standard
The possibility to create just in time reports to prioritize tasks on a
 statistically based calculation decreases the project managers or quality
 assurance managers workload.
 One benefit leads them to focus more on other topics then searching the
 actual most reasonable task.
 
\end_layout

\begin_layout Standard
The fifth research written by Zahra, Khalid and Javed (2013) concentrates
 on an efficient and effective new generation objective quality model for
 mobile applications and it is tied to the device limitations.
 Developing mobile application is similar to desktop application but there
 are certain factors that make mobile apps different.
 The biggest difference is the way people use it.
 Mobile apps are usually small in size and are designed in a way that they
 use less power.
 Users will delete or change the application if its not according to their
 needs and perception of quality
\begin_inset CommandInset citation
LatexCommand cite
key "zahra2013efficient"

\end_inset

.
 
\end_layout

\begin_layout Standard
The presented quality model is separated into two fields.
 One field divides mobile device independent quality characteristics as
 1) Functionality (Suitability & Security) 2) Usability 3) Efficiency 4)
 Maintainability (Adaptability & Extensibility) 5) Data Integrity 6) Portability.
 The next field illuminates the role of the SQA team.
 The important factors which should be considered, to put value to the quality
 of mobile applications are as follows.
 1) Validation of End User Requirements 2) Monitor Mobile application production
 3) Validate performance of Mobile applicaiton 4) Tracking quality of mobile
 application after deployment
\begin_inset CommandInset citation
LatexCommand cite
key "zahra2013efficient"

\end_inset

.
\end_layout

\begin_layout Standard
The previously presented research papers focus all on different stages in
 the product creation cycle.
 To keep this paper in an appropriate scale, I need to isolate all different
 cycles into two umbrella cycles.
 I choose to draw the line between the one process which focuses on the
 idea creation and the other process which focuses on the idea implementation.
 The requirements which need to be accomplished in the two defined cycles
 for the SQA methods have been discussed at the beginning of this chapter.
 
\end_layout

\begin_layout Standard
As a summary, I decided to link each of the most important product life-cycle
 stages, which are 1) Requirements & Specifications: What should your product
 do and ow do you plan to do it? 2) Design & Implementation: What are you
 going to program and how are you sure its right? to the evaluated requirements
 of the SQA process, which are 1) Tools over processes 2) Applicable to
 Generalized Staff 3) Not depending on development frameworks 4) Cost and
 time efficiency.
 By combining the gained information and matching it to the defined model,
 I am going to provide to each life-cycle stage an overview of found best
 practices and fulfillment to the requirements.
 
\end_layout

\begin_layout Standard
On behalf of the previous introduced theory I am going to present my hypothesis:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
SQA Processes tailored and prioritized to the requirements & specifications
 and to the design & implementation stages will increase product quality.
 This by focusing on tools, generalist labor, cost and time efficiency and
 compatibility to the actual engineering process for small-scaled software
 engineering enterprises.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch NoChildDocument
status open

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "thesisExample"
options "alpha"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "custom"
width "2.5cm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
